2008-04-25  Dave Beckett <dave@dajobe.org>

	* src/raptor_avltree.c, src/raptor_general.c,
	src/raptor_identifier.c, src/raptor_internal.h,
	src/raptor_iostream.c, src/raptor_json_writer.c,
	src/raptor_namespace.c, src/raptor_parse.c, src/raptor_qname.c,
	src/raptor_sax2.c, src/raptor_sequence.c, src/raptor_serialize.c,
	src/raptor_serialize_turtle.c, src/raptor_set.c,
	src/raptor_statement.c, src/raptor_stringbuffer.c,
	src/raptor_uri.c, src/raptor_xml.c, src/raptor_xml_writer.c,
	src/raptor_abbrev.c: Use RAPTOR_ASSERT_OBJECT_POINTER_RETURN on
	destructor object arg.  Code comments 2008

2008-04-16  Lauri Aalto <laalto@iki.fi>

	* src/raptor_serialize_turtle.c: (raptor_turtle_serialize_end):
	Reset context->written_header flag to enable serializer object
	reuse.

2008-04-14  Dave Beckett <dave@dajobe.org>

	* src/turtle_lexer.l: Rename fatal_error_longjmp_env to
	turtle_lexer_fatal_error_longjmp_env

	* src/n3_lexer.l: Use setjmp/longjmp to return fatal error
	messages to caller without abort()
	(n3_lexer_fatal_error): Remove abort() call.
	main code: setjmp before starting parse.  Move code to inside %{
	%} block.

	* src/n3_common.h, src/n3_parser.y, src/turtle_common.h,
	src/turtle_parser.y: Count errors in syntax parsing and do not
	report errors after the first one.  A workaround instead of adding
	full bison error parser recovery.

	* configure.ac, src/turtle_lexer.l: Use setjmp/longjmp to return
	fatal error messages to caller without abort()
	(turtle_lexer_fatal_error): Remove abort() call.
	main code: setjmp before starting parse.  Move code to inside %{
	%} block.

2008-04-14  Lauri Aalto <laalto@iki.fi>

	* src/raptor_rdfxml.c: (raptor_rdfxml_end_element_grammar):
	Resiliency fixes: check raptor_parser_internal_generate_id()
	return value

	* src/raptor_libxml.c: (raptor_libxml_free): Resiliency fix: make
	sure myDoc is always freed.

	* src/n3_lexer.l, src/turtle_lexer.l: Reverted from r13787 abort()
	calls back to *_lexer_fatal_error() - it is assumed that these
	functions never return.

	* src/ntriples_parse.c: (raptor_ntriples_generate_statement,
	raptor_ntriples_string_as_utf8_string): Resiliency fixes: check
	for alloc failures.

2008-04-13  Dave Beckett <dave@dajobe.org>

	* src/raptor_rss_common.c: 2008

	* src/raptor_rss.h,
	src/raptor_rss_common.c: (raptor_rss_model_add_item,
	raptor_free_rss_item): Add triples, free it.
	(raptor_clear_rss_item): Deleted, not used.

	* src/raptor_serialize_rss.c: comments
	(raptor_rss10_serialize_statement): pass on handled flag from
	raptor_rss10_store_statement()

	* src/raptor_guess.c: (raptor_guess_parse_chunk):: Check for
	raptor_parser_copy_user_state failure and pass on.

	* src/raptor_grddl.c: (raptor_grddl_ensure_internal_parser): Check
	for raptor_parser_copy_user_state failure and pass on. Slightly
	adjust nearby code to remove else.

	* src/raptor_internal.h,
	src/raptor_parse.c: (raptor_parser_copy_user_state): Add a return
	value on failure of allocs.

	* src/raptor_parse.c: (raptor_parser_copy_user_state): Copy
	Cache-Control: header and User-Agent: header values to destination
	parser

	* src/raptor_internal.h: Note about code changes needed when
	adding user data to raptor_parser

	* src/raptor_internal.h: Removed prototypes for removed functions:
	raptor_parser_error_message_handler,
	raptor_parser_fatal_error_message_handler,
	raptor_parser_warning_message_handler,
	raptor_parser_fatal_error_varargs, raptor_parser_warning_varargs

	* src/n3_lexer.l, src/parsedate.y, src/raptor_parse.c,
	src/raptor_rdfxml.c, src/turtle_lexer.l: Remove calls to abort()
	in mainline code (some aborts still exist in test code for
	consistency failures in avltree but they are only compiled in with
	RAPTOR_DEBUG)

	(raptor_parser_fatal_error): Set parsing failed flag on fatal error.
	(raptor_parser_fatal_error_message_handler,
	raptor_parser_error_message_handler,
	raptor_parser_warning_message_handler): Removed, no longer used.

	(raptor_rdfxml_start_element_grammar):
	case RAPTOR_STATE_PARSETYPE_DESCRIPTION...
	RAPTOR_STATE_PARSETYPE_COLLECTION
	Remove use of abort() for an ancient check for an object URI that can
	be worked around.
	case RAPTOR_STATE_MEMBER_PROPERTYELT:
	With content type RAPTOR_RDFXML_ELEMENT_CONTENT_TYPE_XML_LITERAL,
	remove use of abort() for unknown content types related to
	daml/collections - it will fall through to a fatal error anyway.
	With default content type, remove abort() and tidy the error
	message.
	Parsing will still fail in this case.

	(n3_lexer_fatal_error, turtle_lexer_fatal_error): Do not call abort.

	(ToHour): Do not call abort, print message when debugging and return
	invalid value.

2008-04-12  Dave Beckett <dave@dajobe.org>

	* src/raptor_rss.c: (raptor_rss_start_namespaces): Added, pulling
	namespace scanning out of raptor_rss_parse_chunk.
	(raptor_rss_parse_chunk): Call above.

	* src/raptor_rss.c: Add a nspaces_seen[] array in raptor_rss and
	track namespaces declared either in input (xmlns seen via SAX) or
	output, when writing a field in RSS1.0 schema.  Save them all up
	and generate before emitting.
	(raptor_rss_parse_start): Reset nspaces_seen array to none seen.
	(raptor_rss_sax2_new_namespace_handler): Mark namespace seen, do
	not pass on to rdf namespace handler just yet.
	(raptor_rss_parse_chunk): On finish, scan all fields of all items
	for namespaces and mark those that need declaring.  Then call
	raptor_parser_start_namespace() to start them for the client.

2008-04-11  Dave Beckett <dave@dajobe.org>

	* src/raptor_rss.c: (raptor_rss_sax2_new_namespace_handler): Added.
	(raptor_rss_parse_init): Register
	raptor_rss_sax2_new_namespace_handler to pass on SAX2 namespace
	events to the rdf parser.
	Fixes Issue #0000255 http://bugs.librdf.org/mantis/view.php?id=255

	* docs/tmpl/section-triples.sgml: sgml docs

	* src/raptor_serialize_rss.c: 2008

2008-04-11  Lauri Aalto <laalto@iki.fi>

	* src/raptor_general.c: (raptor_init,raptor_finish): Changed
	raptor_initialised flag to a reference count.

2008-04-05  Dave Beckett <dave@dajobe.org>

	* docs/raptor-serializers.xml: Add JSON serializers section

2008-04-03  Lauri Aalto <laalto@iki.fi>

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_serialize_end):
	Fixed crash when reusing serializer objects. Reset
	context->written_header flag so that when
	raptor_rdfxmla_ensure_writen_header() returns success,
	context->rdf_RDF_element is always non-null.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_serialize_statement):
	Fixed rdfxml-xmp segfault. Make sure avltree cursor points to
	something before trying to indirect it.
	
2008-04-01  Dave Beckett <dave@dajobe.org>

	* src/raptor-config.1: remove undefined macro .l other fixes

	* NEWS.html, RELEASE.html configure.ac, src/win32_raptor_config.h:
	Bumped version to 1.4.18

2008-03-29  Dave Beckett  <dave@dajobe.org>

	* Snapshotted raptor_1_4_17 for 1.4.17 release (SVN 13771)

	* utils/rapper.c: adjust feature pops

	* utils/rapper.c: free features

	* utils/rapper.c: Allow multiple features to be set with
	-f/--feature by storing them away in two raptor_sequence* lists,
	one for parser and one for serializer.

	Then such things like
	 rapper -q -o json -f jsonCallback=foo -f 'jsonExtraData="foo":"bar"' -f relativeURIs ...
	can be called.

	* src/raptor_serialize_json.c: (raptor_json_serialize_init): Alter
	default to serialize with absolute URIs for JSON.
	(raptor_json_serialize_start): Use feature_relative_uris to decide
	what base uri to send to JSON writer.

2008-03-27  Dave Beckett <dave@dajobe.org>

	* src/raptor_serialize_json.c: (raptor_json_serialize_start): Make
	callback start with '(' again.

2008-03-26  Dave Beckett <dave@dajobe.org>

	* src/raptor_sax2.c: (raptor_sax2_unparsed_entity_decl): Do not
	return error when there is no handler.
	(raptor_sax2_external_entity_ref): Error out when there is no
	handler as the XML cannot be parsed with unknown external entity
	references.

	* src/raptor_rdfxml.c, src/raptor_sax2.c:
	(raptor_sax2_unparsed_entity_decl,
	raptor_sax2_external_entity_ref): Moved unparsed entity and
	external entity reference error messages to sax2 class.
	(raptor_rdfxml_unparsed_entity_decl_handler,
	raptor_rdfxml_external_entity_ref_handler): Deleted.
	(raptor_rdfxml_parse_init): Remove setting handlers

	* src/raptor_rdfxml.c: (raptor_rdfxml_unparsed_entity_decl_handler,
	raptor_rdfxml_external_entity_ref_handler): Turn
	fprintf(stderr...) calls into real raptor_parser_error calls

	* src/raptor_sax2.c: (raptor_sax2_external_entity_ref): Note
	failure is happening with 'return 0'

	* src/raptor.h: raptor_sax2_external_entity_ref_handler autodocs

2008-03-25  Dave Beckett <dave@dajobe.org>

	* src/raptor.h, src/raptor_sax2.c, src/raptor_iostream.c: autodocs

	* docs/libraptor.3: 1.4.17 and lots of formatting tidying

	* src/raptor.h, src/raptor_feature.c, src/raptor_internal.h,
	src/raptor_parse.c, src/raptor_sax2.c, src/raptor_serialize.c,
	src/raptor_serialize_json.c, src/raptor_turtle_writer.c,
	src/raptor_xml_writer.c: Added RAPTOR_FEATURE_JSON_EXTRA_DATA name
	jsonExtraData that allows adding data to the end of the top level
	JSON object on output

2008-03-23  Dave Beckett <dave@dajobe.org>

	* docs/tmpl/section-feature.sgml: add json callback feature

2008-03-16  Dave Beckett <dave@dajobe.org>

	* configure.ac: fix check for needing to link with -lm

	* src/raptor_sax2.c: (raptor_sax2_parse_chunk): Fixes to calling
	raptor_log_error_to_handlers when built with expat.

	* src/raptor_parse.c: (main): Only define program if RAPTOR_DEBUG

	* src/raptor_avltree.c: (check_string, main): Casts for C++

	* src/raptor_turtle_writer.c: (main): Cast for C++

	* src/raptor_uri.c: (main): Remove C99 initializer for C++

	* src/raptor_abbrev.c: (raptor_abbrev_node_lookup): Cast for C++

	* src/raptor_set.c: (raptor_id_set_add): Casts for C++

	* src/raptor_turtle_writer.c: (main): use raptor_iostream_tell
	instead of deprecated raptor_iostream_get_bytes_written_count

	* tests/turtle/test-28-out.ttl: Update expected exact turtle
	serializer result due to AVLTree change in re-ordering the triples

	* src/raptor.h, src/raptor_feature.c, src/raptor_internal.h,
	src/raptor_parse.c, src/raptor_sax2.c, src/raptor_serialize.c,
	src/raptor_serialize_json.c, src/raptor_turtle_writer.c,
	src/raptor_xml_writer.c: Added RAPTOR_FEATURE_JSON_CALLBACK
	serializer feature for the JSON serializer to emit a callback
	block like callback(...);
	struct raptor_serializer_s gains feature_json_callback.
	(raptor_free_serializer): Free all string features.
	(raptor_serializer_set_feature_string,
	raptor_serializer_get_feature_string): Store/return JSON callback
	in feature_json_callback.
	raptor_features_list array gains new entry for
	RAPTOR_FEATURE_JSON_CALLBACK with name "jsonCallback".
	(raptor_json_serialize_start): Write callback before serialize start.
	(raptor_json_serialize_end): Terminate callback after serialize end.

	* src/raptor.h: Removed raptor_sax2_parse_handle_errors prototype
	- no such function.

2008-02-25  Lauri Aalto <laalto@iki.fi>

	* src/raptor_rdfxml.c:
	(raptor_rdfxml_start_element_grammar,raptor_rdfxml_end_element_grammar):
	Check for alloc failures.

	* src/raptor_xml.c: (raptor_new_xml_element): Check for cdata
	stringbuffer alloc failure.

	* src/raptor_sax2.c: (raptor_sax2_start_element): Low-memory
	cleanup fixes.

	* src/raptor.h: (raptor_error_handlers): Quick segfault fix:
	statically allocate RAPTOR_LOG_LEVEL_LAST+1 error handler slots

	* src/raptor.h: (raptor_error_handlers): Portability fix: avoid
	"type containing an unknown-size array is not allowed" errors on
	some compilers.

2008-02-24  Lauri Aalto <laalto@iki.fi>

	* src/raptor_www.c: (raptor_www_set_http_cache_control): +1 for
	zero termination

2008-02-24  Dave Beckett <dave@dajobe.org>

	* src/raptor.h, src/raptor_general.c, src/raptor_grddl.c,
	src/raptor_internal.h, src/raptor_libxml.c, src/raptor_parse.c,
	src/raptor_sax2.c, src/raptor_www.c, src/raptor_www_libxml.c:
	Added struct raptor_message_handler_closure for user data plus an
	error handler.
	(raptor_log_error_simple): Removed, only used in raptor_sax2.c
	(raptor_log_error_to_handlers): Added to log to an
	raptor_error_handlers object.
	(raptor_sax2_simple_error): Tidy error calling to use closure
	pointer.
	(raptor_sax2_parse_chunk, raptor_log_error_to_handlers): Use
	raptor_log_error_to_handlers
	(raptor_www_set_error_handler, raptor_www_error): Update for
	closure struct.
	(raptor_grddl_fetch_uri, raptor_grddl_parse_chunk): Update for
	closure struct.  Tidy saving and restoring error handlers
	(raptor_new_parser): Init last_log_level for error handlers.
	(raptor_parse_uri_with_connection, raptor_parser_simple_error,
	raptor_parser_error_varargs, raptor_parser_error_message_handler,
	raptor_parser_warning, raptor_parser_warning_message_handler,
	raptor_set_fatal_error_handler, raptor_set_error_handler,
	raptor_set_warning_handler): Update for closure struct.
	(raptor_libxml_warning, raptor_libxml_error_common,
	raptor_libxml_generic_error,
	raptor_libxml_xmlStructuredErrorFunc): Update for closure struct.
	(raptor_www_libxml_init): Update for closure struct.

2008-02-24  Lauri Aalto <laalto@iki.fi>

	* src/Makefile.am: flex-generated header file does not need fixing
	with fix-flex. It already has YY_NO_UNISTD_H guard and all other
	fix-flex issues are for .c files only.
	Fixes warnings due to multiple inclusion of raptor_config.h.

2008-02-23  Dave Beckett <dave@dajobe.org>

	* docs/tmpl/section-feature.sgml, src/raptor.h,
	src/raptor_feature.c, src/raptor_grddl.c, src/raptor_internal.h,
	src/raptor_parse.c, src/raptor_sax2.c, src/raptor_serialize.c,
	src/raptor_turtle_writer.c, src/raptor_www.c,
	src/raptor_www_curl.c, src/raptor_www_libxml.c,
	src/raptor_xml_writer.c: Add RAPTOR_FEATURE_WWW_HTTP_CACHE_CONTROL
	and RAPTOR_FEATURE_WWW_HTTP_USER_AGENT to control WWW.  Pass that
	on in parsers to internal www.  raptor_www struct gains
	cache_control and user_agent fields.
	(raptor_www_curl_fetch): Disable curl www Pragma: header always.
	(raptor_www_set_http_cache_control): Added.
	(raptor_www_set_user_agent, raptor_www_set_proxy): Error checking
	on malloc failure.
	Fixes Issue #0000252 http://bugs.librdf.org/mantis/view.php?id=252

2008-02-22  Lauri Aalto <laalto@iki.fi>

	* src/raptor_rdfxml.c: (raptor_rdfxml_cdata_grammar): Check for
	null pointer before indirecting it.

	* src/raptor_libxml.c: Removed writable static data from
	raptor_libxml.c

2008-02-16  Dave Beckett <dave@dajobe.org>

	* autogen.sh: autogen checks when env prog version is
	empty. Update all packages to latest autogen.sh

2008-02-09  Dave Beckett <dave@dajobe.org>

	* src/raptor_avltree.c, src/raptor_internal.h:
	(raptor_avltree_remove): Added.
	(raptor_avltree_delete): Rewritten in terms of
	raptor_avltree_remove.  (main): Add test with
	raptor_avltree_remove

2008-02-07  Dave Beckett <dave@dajobe.org>

	* src/raptor_avltree.c: (raptor_avltree_search_internal): Alter to
	return the node. (raptor_avltree_search): Use
	raptor_avltree_search_internal changed

2008-02-07  Lauri Aalto <laalto@iki.fi>

	* src/raptor_serialize_rdfxmla.c:
	(raptor_rdfxmla_emit_subject_properties): Do not throw away return
	value from raptor_rdfxmla_emit_subject_list_items().

	* src/raptor_serialize_rdfxmla.c:
	(raptor_rdfxmla_emit_subject_properties): Check
	raptor_avltree_cursor_first() return value. Fixes a NULL
	indirection crash later on.

	* src/raptor_avltree.c: (raptor_new_avltree): Initialize print_fn
	field to NULL.

2008-02-06  Lauri Aalto <laalto@iki.fi>

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_serialize_statement):
	Ensure variable rv is initialized before use.

2008-02-02  Dave Beckett <dave@dajobe.org>

	* src/raptor_abbrev.c, src/raptor_internal.h,
	src/raptor_serialize_rdfxmla.c, src/raptor_serialize_turtle.c:
	Switch raptor_avltree subject->properties from raptor_sequence to
	raptor_avltree and use an AVL Tree cursor to iterate it.  This
	changes the exact ordering of the output from original order, to
	sorted by raptor_abbrev_node comparison order.

	* src/raptor_avltree.c: Export avltree cursor prototypes.  Added
	raptor_data_print_function field.
	(raptor_avltree_set_print_handler, raptor_avltree_print): Added to
	print an AVL Tree.
	(raptor_avltree_sprout_right): Fix failure to set parent correctly
	in RR rebalancing.
	(raptor_avltree_dump_internal): Print node value if print_fn is
	defined.

	* src/raptor_internal.h: Added raptor_data_print_function typedef.
	Added raptor_avltree_set_print_handler and raptor_avltree_print
	prototypes.  Added avltree cursor prototypes:
	raptor_avltree_cursor_first, raptor_avltree_cursor_last,
	raptor_avltree_cursor_prev, raptor_avltree_cursor_next and
	raptor_avltree_cursor_get

	* src/raptor_avltree.c: (compare_strings): update sig

	* src/raptor_avltree.c, src/raptor_internal.h,
	src/raptor_serialize_json.c, src/raptor_serialize_rdfxmla.c,
	src/raptor_serialize_turtle.c, src/raptor_set.c: Change
	raptor_avltree data from raptor_avltree_t typedef to void*.
	excessive typedefs.  Rename raptor_avltree_compare_function to
	raptor_data_compare_function.  Rename
	raptor_avltree_delete_function to raptor_data_free_function

	* src/raptor.h, src/raptor_general.c, src/raptor_parse.c,
	src/raptor_www.c: (raptor_error_handlers_init): Remove all args
	except object pointer.  Add docs.  This is currently not called
	internally so no need for extra arg soup.  Use to init
	error_handlers everywhere.
	(raptor_new_parser, raptor_www_new_with_connection): Use
	raptor_error_handlers_init rather than set magic directly.

	* src/raptor_statement.c: (raptor_statement_compare): Allow
	subject, predicate or object to have NULL pointers which always
	sort earlier than pointers with values.

2008-01-29  Lauri Aalto <laalto@iki.fi>

	* tests/grddl/Makefile.am: Run GRDDL tests only if GRDDL parser is
	enabled in configuration.

2008-01-27  Dave Beckett <dave@dajobe.org>

	* src/raptor_avltree.c: (raptor_new_avltree): Init size and cursor

	* src/raptor_avltree.c: struct raptor_avltree gains a cursor
	field.
	(raptor_avltree_node_leftmost, raptor_avltree_node_rightmost):
	Added for code clarity.  Really this could be inlined or a macro.
	(raptor_avltree_node_prev, raptor_avltree_node_next): Added for
	moving around tree in order.
	(raptor_avltree_cursor_first, raptor_avltree_cursor_last,
	raptor_avltree_cursor_prev, raptor_avltree_cursor_next,
	raptor_avltree_cursor_get): Added avltree cursor with new methods.
	(main): Added tests for forwards and backwards cursoring.

	* src/raptor_statement.c: code style

	* src/raptor_serialize_turtle.c: (raptor_turtle_serialize_start):
	Indenting

	* src/raptor_serialize_json.c: (raptor_statement_avltree_compare):
	Use raptor_statement_compare.

	* src/Makefile.am, src/raptor.h, src/raptor_general.c,
	src/raptor_statement.c: Added raptor_statement.c for statement
	functions.
	(raptor_statement_compare): Added, based on
	raptor_json_statement_compare.

	* src/raptor_turtle_writer.c: (main): Use write_base_uri in test.

2008-01-23  Dave Robillard <dave@drobilla.net>

	* src/raptor_serialize_turtle.c: (raptor_turtle_context): Fix
	comment on written_header for Turtle (not XML).
	Add feature to control writing @base directive to Turtle files.
	 (RAPTOR_FEATURE_WRITE_BASE_URI): Added.
	 (raptor_new_turtle_writer): Added write_base_uri parameter.


2008-01-22  Dave Beckett <dave@dajobe.org>

	* src/raptor_avltree.c: Remove most internal checks as they do not
	hold while sprouting and rebalancing
	(raptor_avltree_add, raptor_avltree_delete): Check here
	afterwards.

2008-01-21  Dave Beckett <dave@dajobe.org>

	* src/raptor_avltree.c: Run raptor_avltree_check_node after only
	if not rebalancing - node is still being moved.

	* src/raptor_avltree.c: remove QUOTE_FN and flush stderr

	* src/raptor_avltree.c: Remove other raptor_avltree_check_node before

	* src/raptor_avltree.c: (raptor_avltree_sprout): Do not run before
	check, the node is not consistent while it is moving to the right
	place.

	* src/raptor_turtle_writer.c: (main) cast for strlen

	* src/raptor_internal.h: Added prototypes for raptor_avltree_size,
	raptor_avltree_dump and raptor_avltree_check

	* src/raptor_avltree.c: raptor_avltree_node gains a parent field
	raptor_avltree gains a size field
	(raptor_avltree_sprout): Add a parent node arg for updating parent
	field on sprouts.
	(raptor_avltree_add): Call raptor_avltree_sprout with NULL parent.
	(raptor_avltree_print_node): Added for debugging
	(raptor_avltree_check_node): Added to check a node for validity of
	pointers
	(raptor_avltree_sprout_left, raptor_avltree_sprout_right,
	raptor_avltree_sprout, raptor_avltree_balance_left,
	raptor_avltree_balance_right): Update parent pointers and run
	check functions afterwards.
	(raptor_avltree_delete_internal): Run check functions
	(raptor_avltree_size): Added to get tree size.
	(raptor_avltree_dump_internal, raptor_avltree_dump,
	raptor_avltree_check_internal, raptor_avltree_check): Added for
	debugging tree and checking consistency.
	(main): Added one more test item so tree is not balanced.  Run
	checks during adds and delete.

2008-01-21  Lauri Aalto <laalto@iki.fi>

	* src/raptor_rdfxml.c: (raptor_rdfxml_parse_init): Check for
	allocation failures and return error code if necessary.
	(raptor_rdfxml_parse_terminate): Do not assume sax2, id_set are
	initialized.

2008-01-21  Dave Beckett <dave@dajobe.org>

	* utils/rdfdiff.c: Changed algorithm - read both files into
	rdfdiff_file* structures with rdfdiff_collect_statements, removing
	duplicates for each file then compare afterwards.
	(rdfdiff_statement_equals): Edited to have one return.
	(rdfdiff_statement_find): Added
	(rdfdiff_statement_exists): Uses rdfdiff_statement_find.
	(rdfdiff_compare_statements): Removed.
	(main): Use rdfdiff_collect_statements and after both files are
	read in, walk through and remove common statements from the
	from_file list.

	* tests/Makefile.am: show results from check-rdfdiff failing

	* utils/rdfdiff.c: (rdfdiff_statement_exists): Added.
	(rdfdiff_collect_statements): Use rdfdiff_statement_exists to not
	add duplicate statements.

	* tests/Makefile.am: Set result=1 on errors

2008-01-20  Dave Beckett <dave@dajobe.org>

	* tests/turtle/rdf-schema.out, tests/turtle/rdf-schema.ttl: Remove
	duplicate statements from rdf-schema* now that serializer discards
	them

	* src/raptor_abbrev.c: (raptor_abbrev_subject_add_property): Do
	not save duplicate statements.
	Fixes Issue #0000245 http://bugs.librdf.org/mantis/view.php?id=245

	* src/raptor_avltree.c: (main): Add test for raptor_avltree_search

	* src/raptor.h, src/raptor_xml.c: autodocs

2008-01-17  Dave Beckett <dave@dajobe.org>

	* src/raptor_serialize_json.c: (raptor_json_serialize_init):
	Change the test for name "json".

	* src/raptor_serialize_json.c: (raptor_init_serializer_json):
	Change serializer name 'json-t' to 'json-triples'

	* src/raptor_serialize_json.c: (raptor_init_serializer_json): Set
	JSON mime type to application/json.  Change serializer name 'json'
	to resource-centric one and add alias 'json-r'.

	* src/raptor_xml_writer.c: (main): Use raptor_iostream_tell rather
	than deprecated raptor_iostream_get_bytes_written_count

	* src/raptor_serialize_json.c: (raptor_init_serializer_json): Cast

	* src/raptor_json_writer.c: Added define
	RAPTOR_JSON_WRITER_DATATYPES to remove unused fields and
	initialising/freeing supporting commented-out function
	raptor_json_writer_literal_datatype

	* configure.ac, src/Makefile.am, src/raptor_internal.h,
	src/raptor_json_writer.c, src/raptor_serialize.c,
	src/raptor_serialize_json.c: Added JSON serializing support.
	raptor_json_writer class for formatting JSON.  json-r and json-t
	serializations based on
	http://n2.talis.com/wiki/RDF_JSON_Specification

2008-01-16  Dave Beckett <dave@dajobe.org>

	* src/raptor_turtle_writer.c: (raptor_iostream_write_string_python):
	Do not write too much raw UTF-8

	* src/raptor_turtle_writer.c:
	(raptor_iostream_write_string_python): Add Long Turtle mode 2,
	shift JSON to 3.
	(raptor_turtle_writer_quoted_counted_string): Use mode 2 for
	triple-quoted long strings

	* src/raptor_internal.h: Add
	raptor_turtle_writer_quoted_counted_string replacing
	raptor_turtle_writer_quoted

	* src/raptor.h, src/raptor_serialize_ntriples.c,
	src/raptor_turtle_writer.c: (raptor_iostream_write_string_python):
	Added renamed from raptor_iostream_write_string_turtle and
	replacing raptor_iostream_write_string_ntriples. Handles writing
	to an iostream with escapes in N-Triples, Turtle and JSON with
	appropriate escapes which are all python like.
	(raptor_iostream_write_string_turtle): Changed to use
	raptor_iostream_write_string_python.
	(raptor_turtle_writer_quoted_counted_string): Renamed from
	raptor_turtle_writer_quoted and taking a length

2008-01-14  Lauri Aalto <laalto@iki.fi>

	* autogen.sh: Do not branch autogen.sh scripts but keep them
	identical

2008-01-12  Dave Beckett <dave@dajobe.org>

	* autogen.sh: automake 1.10 research

2008-01-11  Lauri Aalto <laalto@iki.fi>

	* src/n3_parser.y, src/ntriples_parse.c, src/raptor_grddl.c,
	src/raptor_guess.c, src/raptor_internal.h, src/raptor_parse.c,
	src/raptor_rdfxml.c, src/raptor_rss.c, src/raptor_serialize.c,
	src/raptor_serialize_dot.c, src/raptor_serialize_ntriples.c,
	src/raptor_serialize_rdfxml.c, src/raptor_serialize_rdfxmla.c,
	src/raptor_serialize_rss.c, src/raptor_serialize_simple.c,
	src/raptor_serialize_turtle.c, src/turtle_parser.y:
	(raptor_*_serializer_register_factory,
	raptor_*_parser_register_factory) Return error codes from parser
	and serializer factory registration functions.
	(raptor_serializer_register_factory,
	raptor_parser_register_factory) Check factory function return
	code.
	(raptor_parser_factory_add_alias,
	raptor_parser_factory_add_mime_type,
	raptor_parser_factory_add_uri) Added error code returns. Bubble up
	OOM errors to caller.

	* src/raptor_parse.c, src/raptor_serialize.c: (raptor_parsers_init,
	raptor_parser_register_factory,
	raptor_serializer_register_factory): Let raptor_init() handle
	dying on OOM.

	* src/n3_parser.y, src/ntriples_parse.c, src/raptor_general.c,
	src/raptor_grddl.c, src/raptor_guess.c, src/raptor_internal.h,
	src/raptor_parse.c, src/raptor_rdfxml.c, src/raptor_rss.c,
	src/raptor_sax2.c, src/raptor_serialize.c,
	src/raptor_serialize_dot.c, src/raptor_serialize_ntriples.c,
	src/raptor_serialize_rdfxml.c, src/raptor_serialize_rdfxmla.c,
	src/raptor_serialize_rss.c, src/raptor_serialize_simple.c,
	src/raptor_serialize_turtle.c, src/raptor_uri.c,
	src/turtle_parser.y: Changed raptor internal init functions to
	return error codes.

2008-01-07  Lauri Aalto <laalto@iki.fi>

	* src/raptor.h: Add raptor_error_handlers_init and raptor_sax2
	RAPTOR_API exports.

	* src/raptor_rfc2396.c: (raptor_uri_resolve_uri_reference): Cast
	unsigned char -> char. Fixes compilation problems on non-gcc
	compilers.

2008-01-05  Dave Beckett <dave@dajobe.org>

	* src/raptor_rfc2396.c: Update URI resolving for RFC3986 - some
	abnormal examples have different results or have defined possible
	results.
	(raptor_uri_resolve_uri_reference): Remove leading /../ and /./
	(main): Update tests for RFC3986 changes

	* src/raptor_general.c: 2008

2008-01-04  Lauri Aalto <laalto@iki.fi>

	* src/raptor_serialize_turtle.c: (raptor_turtle_ensure_writen_header):
	Do not assume context->turtle_writer is initialized.

	* src/raptor_serialize_turtle.c: (raptor_turtle_serialize_init):
	Require non-NULL rdf:type abbrev node.

	* src/raptor_abbrev.c: (raptor_abbrev_subject_add_property):
	Prevent low-memory double deletes - increment object reference
	counts earlier.

	* src/raptor_turtle_writer.c: (raptor_turtle_writer_quoted): Check
	for stringbuffer alloc failures.

2008-01-03  Dave Beckett <dave@dajobe.org>

	* src/raptor.h, src/raptor_qname.c: Added
	raptor_qname_get_counted_value

2008-01-03  Lauri Aalto <laalto@iki.fi>

	* src/raptor_serialize_turtle.c: (raptor_turtle_serialize_statement):
	Return error if raptor_abbrev_node_lookup() or
	raptor_abbrev_subject_add_property() calls fail.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_serialize_statement):
	Removed redundant conditional.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_ensure_writen_header):
	Check for qname alloc failure, do not pass NULL attributes to XML
	element.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_serialize_statement):
	Lowmem fixes. Return raptor_abbrev_subject_add_property() errors
	to caller.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_ensure_writen_header):
	Added int return code.
	(raptor_rdfxmla_serialize_end) Fixed low-memory crash: make sure
	context->rdf_RDF_element is not used if NULL.

	* src/raptor_abbrev.c: (raptor_new_qname_from_resource): Fixed
	low-memory leaks.

	* src/raptor_serialize_rdfxmla.c, src/raptor_serialize_turtle.c:
	rdfxml-abbrev & turtle serializer error messages: Removed double
	0x prefixes - %p already gives one.

	* src/raptor_iostream.c: Changed raptor_iostream_handler2
	initializers from gcc/c99 style to traditional C.

2008-01-02  Lauri Aalto <laalto@iki.fi>

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_serialize_end):
	Do not assume xml_writer or rdf_RDF_element are initialized.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_serialize_statement):
	Check for raptor_abbrev_node_lookup() errors.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_ensure_writen_header):
	Check for alloc failures.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_emit_subject):
	Check for alloc failures.

	* src/raptor_serialize_rdfxmla.c:
	(raptor_rdfxmla_emit_subject_properties): Check for alloc failures.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_emit_literal):
	Check for qname attribute alloc failures.

	* src/raptor_serialize_rdfxmla.c: (raptor_rdfxmla_emit_resource):
	Check for qname attribute alloc failure.

	* src/raptor_serialize_rdfxmla.c:
	(raptor_rdfxmla_emit_subject_list_items): Check for xml element
	alloc failure.

	* src/raptor_abbrev.c: (raptor_new_qname_from_resource): Check for
	alloc failure.

	* src/raptor_abbrev.c: (raptor_abbrev_node_lookup): Check for
	lookup node allocation failures.

	* src/raptor_abbrev.c: (raptor_new_abbrev_node): Check for alloc
	failures.

	* src/turtle_parser.y: (raptor_turtle_parse_chunk): Do not leave
	turtle_parser->buffer a dangling pointer if realloc fails.
	(raptor_turtle_parse_terminate) When freeing
	turtle_parser->buffer, do not trust turtle_parser->buffer_length
	to be in sync.

	* src/raptor_iostream.c: (raptor_new_iostream_to_filename): Close
	file on alloc failure.

	* src/raptor_iostream.c: (raptor_new_iostream_from_filename):
	Close file on alloc failure.

	* src/raptor_iostream.c: (raptor_iostream_calculate_modes,
	raptor_iostream_check_handler, raptor_new_iostream_from_handler2):
	Fix compiler error on some non-gcc compilers - illegal use of
	const.

2008-01-01  Dave Beckett <dave@dajobe.org>

	* src/raptor_iostream.c: code style

	* src/raptor_iostream.c: docs

	* src/raptor_iostream.c: (raptor_iostream_calculate_modes): Use
	handler2 version for calculations.
	(raptor_iostream_check_handler): Check handler API versions.
	(raptor_new_iostream_from_handler2,
	raptor_new_iostream_to_filename,
	raptor_new_iostream_to_file_handle, raptor_new_iostream_to_string,
	raptor_new_iostream_from_filename,
	raptor_new_iostream_from_file_handle): Set mode once.

	* src/raptor_iostream.c: Check handler matches requested mode
	(raptor_iostream_calculate_modes): Added.
	(raptor_iostream_check_handler): Renamed from
	raptor_iostream_init_common.
	(raptor_new_iostream_from_handler2, raptor_new_iostream_to_filename,
	raptor_new_iostream_to_file_handle, raptor_new_iostream_to_string,
	raptor_new_iostream_from_filename,
	raptor_new_iostream_from_file_handle): Use
	raptor_iostream_check_handler to check things and
	raptor_iostream_calculate_modes to set mode.

	* src/raptor_iostream.c: Merge read/write filename code Ensure
	finish is called to fclose(handle)

	* src/raptor_iostream.c: (test_*): Replace uses of
	raptor_iostream_get_bytes_written_count with raptor_iostream_tell

	* src/raptor_iostream.c: Use unsigned long offset not bytes.
	(raptor_iostream_get_bytes_written_count): Deprecated for
	raptor_iostream_tell
	(raptor_iostream_tell): Added

	* src/raptor.h: Deprecate raptor_iostream_get_bytes_written_count
	for raptor_iostream_tell

	* src/raptor_iostream.c: (raptor_filename_iostream_finish): Added
	to close filename file
	handle. raptor_iostream_read_file_handle_handler struct added
	(raptor_new_iostream_from_file_handle): Added.
	(test_read_from_file_handle): Enabled.

	* src/raptor_iostream.c: Put ended EOF into flags

	* src/raptor_iostream.c: Merge read/write sinks

	* src/raptor_iostream.c: Add private field to raptor_iostream_s
	for handling freeing handler2
	(raptor_new_iostream_from_handler2): Add const to hamdler2 arg.

	* src/raptor.h: raptor_iostream_handler2 loses private field - it
	can be part of internals of raptor_iostream Updated
	raptor_new_iostream_from_handler2 to make handler2 arg
	constant pointer to constant data.

	* src/raptor.h: Added raptor_iostream_read_eof and typedef
	raptor_iostream_read_eof_func to raptor_iostream_handler2
	structure.

	* src/raptor_iostream.c: (raptor_iostream_read_eof): Added.
	(main) More unit test refactoring and checking.

	* src/raptor_iostream.c: Resource cleanup on test failures

	* src/raptor_iostream.c: Refactor read tests to be units - one
	function per test.

	* src/raptor_iostream.c: Refactor write tests to be units - one
	function per test.

	* src/raptor_iostream.c: (main): Tests for iostream reading

